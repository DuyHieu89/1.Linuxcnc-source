name: Build CI

on:
  push:
  pull_request:
  release:
    types: [published]
  check_suite:
    types: [rerequested]

jobs:
  rip-and-test:
    runs-on: ubuntu-20.04
    steps:
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0
    - run: git fetch --recurse-submodules=no https://github.com/linuxcnc/linuxcnc refs/tags/*:refs/tags/*
    - name: Build RIP & test
      run: |
        ./scripts/travis-install-build-deps.sh
        cd src
        ./autogen.sh
        ./configure --with-realtime=uspace --disable-check-runtime-deps
        make -O -j$((1+$(nproc))) default pycheck V=1
        # Note that the package build covers html docs
        ../scripts/rip-environment runtests -p
    
  htmldocs:
    runs-on: ubuntu-20.04
    steps:
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0
    - run: git fetch --recurse-submodules=no https://github.com/linuxcnc/linuxcnc refs/tags/*:refs/tags/*
    - name: Build HTML docmentation
      run: |
        ./scripts/travis-install-build-deps.sh
        cd src
        ./autogen.sh
        ./configure --with-realtime=uspace --disable-check-runtime-deps --enable-build-documentation=html
        make -O -j$((1+$(nproc))) docs
        # Note that the package build covers html docs

  package:
    runs-on: ubuntu-20.04
    steps:
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0
    - name: Build Debian package
      run: |
        set -x
        git fetch --recurse-submodules=no https://github.com/linuxcnc/linuxcnc refs/tags/*:refs/tags/*
        ./scripts/travis-install-build-deps.sh
        codename=$(grep VERSION_CODENAME /etc/os-release | cut -d = -f 2)
        dch --maintmaint --distribution $codename "GitHub test package."
        fakeroot ./debian/rules binary
        sudo apt-get install ../*.deb
        ./scripts/runtests -p tests/
        lintian --info --display-info --pedantic --display-experimental ../*.deb

  cppcheck:
    runs-on: ubuntu-20.04
    steps:
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0
    - name: Perform Source Code checks that were successful in the past
      run: |
        set -x
        git fetch --recurse-submodules=no https://github.com/linuxcnc/linuxcnc refs/tags/*:refs/tags/*
        sudo apt-get -y install cppcheck
        
        # C
        echo -n "I (1/4): checking HAL folders with C code only from dir "; pwd
        for d in src/hal/classicladder src/hal/components; do (cd $d && cppcheck -j $(nproc) --language=c --force *.h *.c); done
        echo -n "I (2/4): checking EMC folders with C code only from dir "; pwd
        for d in src/emc/motion-logger src/emc/tp; do (cd $d && cppcheck -j $(nproc) --language=c --force *.h *.c); done
        # problematic: src/hal/drivers src/hal/user_comps src/hal/utits
        
        # C++
        echo -n "I (3/4): checking EMC folders with C++ code only from dir "; pwd
        for d in src/emc/canterp src/emc/ini src/emc/pythonplugin src/emc/tooldata; do (cd $d && cppcheck -j $(nproc) --language=c++ --force *.hh *.cc); done
        # problematic iotask src/emc/sai src/emc/task

        # C and C++ in same dir
        echo -n "I (4/4): checking EMC folders with both C and C++ code from dir "; pwd
        for d in src/emc/rs274ngc; do (cd $d && cppcheck -j $(nproc) --language=c --force *.h *.c && cppcheck -j $(nproc) --language=c++ --force *.hh *.cc); done
        # problematic src/emc/kinematics src/emc/nml_intf src/emc/usr_intf
