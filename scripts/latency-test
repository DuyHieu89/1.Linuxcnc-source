#!/bin/bash
SCRIPT_LOCATION=$(dirname $(readlink -f $0));
if [ -f $SCRIPT_LOCATION/rip-environment ] && [ -z "$EMC2_HOME" ]; then
    . $SCRIPT_LOCATION/rip-environment
fi

T=`mktemp -d`
trap 'cd /; [ -d $T ] && rm -rf $T' SIGINT SIGTERM EXIT
cd $T

calc() { awk "BEGIN { print ($1); }" < /dev/null; }
icalc() { awk "BEGIN { printf \"%.0f\n\", ($1); }" < /dev/null; }

parse_time () {
    case $1 in
    -)   echo "0" ;;
    *ns) icalc "${1%ns}" ;;
    *us|*µs) icalc "1000*${1%us}" ;;
    *ms) icalc "1000*1000*${1%ms}" ;;
    *s)  icalc "1000*1000*1000*${1%s}" ;;
    *)   if [ $1 -lt 1000 ]; then icalc "1000*$1"; else icalc "$1"; fi ;;
    esac
}

human_time () {
    if [ "$1" -eq 0 ]; then echo "-"
    elif [ "$1" -ge 1000000000 ]; then echo "$(calc $1/1000/1000/1000)s"
    elif [ "$1" -ge 1000000 ]; then echo "$(calc $1/1000/1000)ms"
    elif [ "$1" -ge 1000 ]; then echo "$(calc $1/1000)µs"
    else echo "$1ns"
    fi
}

usage () {
    echo "Usage:"
    echo "       latency-test [base-period [servo-period]]"
    echo "   or:"
    echo "       latency-test period -      # for single thread"
    echo "   or:"
    echo "       latency-test -h | --help   # (this text)"
    echo ""
    echo "Defaults:     base-period=${BASE}nS servo-period=${SERVO}nS"
    echo "Equivalently: base-period=$(human_time $BASE) servo-period=$(human_time $SERVO)"
    echo ""
    echo "Times may be specified with suffix \"s\", \"ms\", \"us\" \"µs\", or \"ns\""
    echo "Times without a suffix and less than 1000 are taken to be in us;"
    echo "other times without a suffix are taken to be in ns"
    echo ""
    echo "The worst-case latency seen in any run of latency-test"
    echo "is written to the file ~/.latency"
    exit 1
}

BASE=$(parse_time 25us); SERVO=$(parse_time 1ms)

case $1 in
  -h|--help) usage;;
esac

case $# in
0) ;;
1) BASE=$(parse_time $1) ;;
2) BASE=$(parse_time $1); SERVO=$(parse_time $2) ;;
*) usage;;
esac

if [ "$BASE" -gt "$SERVO" ]; then TEMP=$BASE; BASE=$SERVO; SERVO=$TEMP; fi
if [ "$BASE" -eq "$SERVO" ]; then BASE=0; fi

BASE_HUMAN=$(human_time $BASE)
SERVO_HUMAN=$(human_time $SERVO)
if [ $BASE -eq 0 ]; then
cat > lat.hal <<EOF
loadrt threads name1=slow period1=$SERVO
loadrt timedelta count=1
addf timedelta.0 slow
start
net sl timedelta.0.max => lat.sl
net sj timedelta.0.jitter => lat.sj
net st timedelta.0.out => lat.st
net reset lat.reset => timedelta.0.reset
loadusr -w bash latexit.sh
EOF


cat > latexit.sh <<EOF
L=\$((halcmd gets sj
    if [ -f $HOME/.latency ]; then cat $HOME/.latency; fi
    ) | sort -n | tail -1)
echo \$L > $HOME/.latency
EOF

else
cat > lat.hal <<EOF
loadrt threads name1=fast period1=$BASE name2=slow period2=$SERVO
loadrt timedelta count=2
addf timedelta.0 fast
addf timedelta.1 slow
start
loadusr -w bash latstart.sh
EOF

cat > latstart.sh <<EOF
while true
do
  sl=\$(halcmd getp timedelta.1.max)
  sj=\$(halcmd getp timedelta.1.jitter)
  st=\$(halcmd getp timedelta.1.out)
  bl=\$(halcmd getp timedelta.0.max)
  bj=\$(halcmd getp timedelta.0.jitter)
  bt=\$(halcmd getp timedelta.0.out)
  echo "servo: Max = \$sl jitter = \$sj out = \$st base: Max = \$bl jitter = \$bj out = \$bt "
  sleep 1
done
EOF
fi


halrun lat.hal
