#!/usr/bin/env python
from pyhal import *
import time
from struct import *
import os
from raster import *

os.system('realtime start')

c = component("test")

position = c.pinNew("position", halType.FLOAT, pinDir.OUT)
program = c.pinNew("program", halType.PORT, pinDir.OUT)
reset = c.pinNew("reset", halType.BIT, pinDir.IO)
enabled = c.pinNew("enabled", halType.BIT, pinDir.IN)
output = c.pinNew("output", halType.FLOAT, pinDir.IN)
fault = c.pinNew("fault", halType.BIT, pinDir.IN)
fault_code = c.pinNew("fault-code", halType.UNSIGNED, pinDir.IN)
state = c.pinNew("state", halType.UNSIGNED, pinDir.IN)
prog_size = c.pinNew("prog-size", halType.UNSIGNED, pinDir.IN)
prog_counter = c.pinNew("prog-counter", halType.UNSIGNED, pinDir.IN)
bitmap_position = c.pinNew("bitmap-position", halType.FLOAT, pinDir.IN)
current_pixel_index = c.pinNew("current-pixel-index", halType.SIGNED, pinDir.IN)
current_pixel_value = c.pinNew("current-pixel-value", halType.FLOAT, pinDir.IN)
previous_pixel_value = c.pinNew("previous-pixel-value", halType.FLOAT, pinDir.IN)
c.ready()

prog = RasterProgrammer("programmer")

#instantiate the raster component, 
#add it to a thread and link all signals from
#the test component here
assert os.system('halcmd -f raster.hal') == 0, "raster.hal script failed"

def printStats():
    print "Program State {0}".format(state.value)
    print "Last Command {0}".format(command.value)
    print "Program Fault {0}".format(fault.value)
    print "Program Fault Code {0}".format(fault_code.value)
    print "Program Size {0}".format(prog_size.value)
    print "Program Counter {0}".format(prog_counter.value)
    print "Enabled {0}".format(enabled.value)
    print "Output {0}".format(output.value)
    print ""


def sleep():
    time.sleep(0.01)



def testProgram(pos, offset, bpp, dpu, program, data):
    global prog
    position.value = pos
    prog.begin(offset, bpp, dpu, len(program))

    prog.data(program)

    prog.run()
    assert fault.value == 0, "Fault should not have happend in program"
    assert enabled.value, "Raster not enabled after programming"

    for (pos, pow) in data:
        position.value = pos
        sleep()
        assert output.value == pow, "output at position {0} should be {1}. Got {2}".format(pos, pow, output.value)
    #once prosition is exceeded the program should be finished and raster should reset
    assert not enabled.value

#testProgram(-1.0,
#            1.0,
#            4,  #4 bpp, 15 values 0-15 and 16 is off
#            1.0,
#            "0EFE0", #10 pixels, 1 mm per pixel value
#            [(-.5, -1.0),
#             (0.0, 0.0),
#             (0.5, 0.5),
#             (1.0, 1.0),
#             (1.5, -1.0),
#             (2.0, -1.0),
#             (2.5, -1.0),
#             (3.0, 1.0),
#             (3.5, 0.5),
#             (4.0, 0.0),
#             (5.0, -1.0)])

#c.exit()
#prog.exit()

#os.system('halrun -U')


position.value = -1.0
p = "01234567F89ABCDEF"
prog.begin(1.0, 4, 1.0, len(p))
prog.data(p)
prog.run()

for p in [-1.0, -.5, 0.0, 0.0001, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0, 10.5, 11.0, 11.5, 12, 12.5, 13, 13.5, 14, 14.5, 15, 15.5, 16, 16.5, 17]:
    position.value = p;
    sleep()
    print "pos {0}. bitpos {1}. pix-ind {2}. prev-v {3}, cur_v {4}, out {5}\n".format(position.value, bitmap_position.value, current_pixel_index.value, previous_pixel_value.value, current_pixel_value.value, output.value)


print "state is {0}".format(state.value)

position.value = 11.0
p = "0123456789ABCDE"
prog.begin(-1.0, 4, 1.0, len(p))
prog.data(p)
prog.run()
for p in [11.0, 10.5, 10.0, 9.5, 9.0, 8.5, 7.0, 6.5, 6.0, 5.5, 5.0, 4.5, 4.0, 3.5, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0, -.5, -1.0]:
    position.value = p;
    sleep()
    print "pos {0}. bitpos {1}. pix-ind {2}. prev-v {3}, cur_v {4}, out {5}\n".format(position.value, bitmap_position.value, current_pixel_index.value, previous_pixel_value.value, current_pixel_value.value, output.value)



exit(0)

